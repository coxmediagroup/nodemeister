"""
High-level functional tests for enc.
"""

import pytest
import enc
import django
import os


class TestFunctionalDumpToYAML():
    """
    Various tests based on data manually entered into the admin,
    and then dumped using the enc/fixtures/dump.sh then translated
    to python object creation statements using enc/fixtures/dump_to_creates.py

    these tests SHOULD GO AWAY once we have real unit and integration tests;
    they're only intended to be high level functional tests (given admin input
    yields a given YAML file) put in place before we change any application code.
    """

    # mark everything in the class as requiring DB access, and functional tests
    pytestmark = [pytest.mark.django_db, pytest.mark.functional]

    def test_functional_dump2yaml_20131125_194117(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-41-17.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        to_save.append(node1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-41-17.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_194204(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-42-04.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        to_save.append(node1)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-42-04.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_194500(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-45-00.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-45-00.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_194535(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-45-35.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-45-35.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_194651(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-46-51.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-46-51.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_194743(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-47-43.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        classexclusion1 = enc.models.ClassExclusion.objects.create(node=node1, exclusion='class_group1_bar')
        to_save.append(classexclusion1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-47-43.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_194832(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-48-32.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:52 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        paramexclusion1 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_group1_baz')
        to_save.append(paramexclusion1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-48-32.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_195012(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-50-12.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:53 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        group2 = enc.models.Group.objects.create(name='group2', description='group2')
        to_save.append(group2)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        groupclass3 = enc.models.GroupClass.objects.create(classname='cls_grp2', classparams=None, group=group2)
        to_save.append(groupclass3)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        groupparameter4 = enc.models.GroupParameter.objects.create(paramkey='param_grp2', paramvalue={u'foo': u'param_grp2'}, group=group2)
        to_save.append(groupparameter4)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        paramexclusion1 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_group1_baz')
        to_save.append(paramexclusion1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-50-12.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_195038(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-50-38.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:53 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group2 = enc.models.Group.objects.create(name='group2', description='group2')
        to_save.append(group2)
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        group1.parents.add(group2)
        to_save.append(group1)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        groupclass3 = enc.models.GroupClass.objects.create(classname='cls_grp2', classparams=None, group=group2)
        to_save.append(groupclass3)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        groupparameter4 = enc.models.GroupParameter.objects.create(paramkey='param_grp2', paramvalue={u'foo': u'param_grp2'}, group=group2)
        to_save.append(groupparameter4)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        paramexclusion1 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_group1_baz')
        to_save.append(paramexclusion1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-50-38.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_195122(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-51-22.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:53 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        group2 = enc.models.Group.objects.create(name='group2', description='group2')
        group2.parents.add(group1)
        to_save.append(group2)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        groupclass3 = enc.models.GroupClass.objects.create(classname='cls_grp2', classparams=None, group=group2)
        to_save.append(groupclass3)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        groupparameter4 = enc.models.GroupParameter.objects.create(paramkey='param_grp2', paramvalue={u'foo': u'param_grp2'}, group=group2)
        to_save.append(groupparameter4)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        paramexclusion1 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_group1_baz')
        to_save.append(paramexclusion1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-51-22.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_195222(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-52-22.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:53 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        group2 = enc.models.Group.objects.create(name='group2', description='group2')
        group2.parents.add(group1)
        to_save.append(group2)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        groupclass3 = enc.models.GroupClass.objects.create(classname='cls_grp2', classparams=None, group=group2)
        to_save.append(groupclass3)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        groupparameter4 = enc.models.GroupParameter.objects.create(paramkey='param_grp2', paramvalue={u'foo': u'param_grp2'}, group=group2)
        to_save.append(groupparameter4)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        paramexclusion1 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_group1_baz')
        to_save.append(paramexclusion1)
        paramexclusion2 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_grp2')
        to_save.append(paramexclusion2)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-52-22.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

    def test_functional_dump2yaml_20131125_195241(self, client):
        """
        High-level functional object dump-to-yaml tests

        generated from enc/fixtures/2013-11-25_19-52-41.json as of rev 29a0f34
        generated by enc/fixtures/dump_to_creates.py by 2013-12-07 21:04:53 (jason@jasonantman.com on jantman) at palantir
        """
        to_save = []
        group1 = enc.models.Group.objects.create(name='group1', description='groupOne')
        to_save.append(group1)
        group2 = enc.models.Group.objects.create(name='group2', description='group2')
        group2.parents.add(group1)
        to_save.append(group2)
        node1 = enc.models.Node.objects.create(hostname='testnode', description='testnode_description')
        node1.excluded_groups.add(group2)
        node1.groups.add(group1)
        to_save.append(node1)
        groupclass1 = enc.models.GroupClass.objects.create(classname='class_group1_foo', classparams={u'foo_grp1': u'bar_grp1'}, group=group1)
        to_save.append(groupclass1)
        groupclass2 = enc.models.GroupClass.objects.create(classname='class_group1_bar', classparams={u'bar_grp1': u'baz'}, group=group1)
        to_save.append(groupclass2)
        groupclass3 = enc.models.GroupClass.objects.create(classname='cls_grp2', classparams=None, group=group2)
        to_save.append(groupclass3)
        nodeclass1 = enc.models.NodeClass.objects.create(node=node1, classname='barclass', classparams=None)
        to_save.append(nodeclass1)
        groupparameter2 = enc.models.GroupParameter.objects.create(paramkey='param_group1_bar', paramvalue={u'fooG1param': u'bar'}, group=group1)
        to_save.append(groupparameter2)
        groupparameter3 = enc.models.GroupParameter.objects.create(paramkey='param_group1_baz', paramvalue={u'foo': u'param_group1_baz'}, group=group1)
        to_save.append(groupparameter3)
        groupparameter4 = enc.models.GroupParameter.objects.create(paramkey='param_grp2', paramvalue={u'foo': u'param_grp2'}, group=group2)
        to_save.append(groupparameter4)
        nodeparameter2 = enc.models.NodeParameter.objects.create(node=node1, paramkey='foo_param', paramvalue={u'foo': u'bar'})
        to_save.append(nodeparameter2)
        paramexclusion1 = enc.models.ParamExclusion.objects.create(node=node1, exclusion='param_group1_baz')
        to_save.append(paramexclusion1)

        for o in to_save:
            o.save()

        with open('enc/fixtures/2013-11-25_19-52-41.yaml', 'r') as fh:
            yaml = fh.read()

        response = client.get('/enc/puppet/testnode', CONTENT_TYPE='application/json')
        assert response.status_code == 200
        assert response.content == yaml

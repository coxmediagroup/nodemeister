def work_tree(obj,**kwargs): 
    exclusions = kwargs.get('exclusions',{"groups":[],"classes":[],"params":[]})
    groups_done = {}
    classes = {"depths":{},"content":{}}
    params = {"depths":{},"content":{}}
    if  hasattr(obj, 'hostname') and not hasattr(obj, 'name'):
        obj.name = obj.hostname
    to_index = [(obj,1)]

    while to_index:
        (obj, depth) = to_index.pop()
        if obj.name in groups_done and groups_done[obj.name] <= depth:
            continue

        objclasses = obj.classes.exclude(classname__in=exclusions['classes'])
        updated_classes = update_values(objclasses,"classname","classparams",depth=depth,results=classes)

        objparams = obj.parameters.exclude(paramkey__in=exclusions['params'])
        updated_params = update_values(objparams,"paramkey","paramvalue",depth=depth,results=params)
        
        if not updated_classes or not updated_params:
            return ("Fail","Fail")

        groups_done[obj.name] = depth
        for group in obj.groups.exclude(name__in=exclusions['groups']):
            to_index.append((group,depth+1))

    params['done_count'] = len(groups_done)
    return (classes["content"], params["content"])




def update_values(objs,keyname,valuename,**kwargs):
    depth=kwargs.get("depth",False)
    if not depth:
        results=kwargs.get("results",{})
    else:
        results=kwargs.get("results",{"depths":{},"content":{}})
    for obj in objs:
        if hasattr(obj, keyname):
            keyinstance = getattr(obj, keyname)
            if not depth:
                results[keyinstance] = getattr(obj, valuename, None)
            else:
                if keyinstance in results["depths"] and results["depths"][keyinstance] == depth:
                    print results
                    return False
                if keyinstance not in results["depths"] or results["depths"][keyinstance] > depth:
                    results["depths"][keyinstance] = depth
                    results["content"][keyinstance] = getattr(obj, valuename, None)
    return True